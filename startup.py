import GCP
import os
from odm_eval import ODM_eval


def getGCP(locations):
    '''
    GCP setup
    '''

    # get all files GPS
    GCP_dict = GCP.get_GCP_GPS(locations['all_gcp_location'])

    # order files by closeness to a control point
    sorted_GCP = GCP.order_pic(GCP_dict, locations['images_location'])
    
    # user manually selects GCP location in files
    GCP_img_list = GCP.user_GCP_select(sorted_GCP)    
    
    # write GCP to file using ODM required style
    gcp_location = locations['project_location'] + '/gcp_list.txt'
    GCP.create_GCP_file(GCP_img_list, filename=gcp_location)    



# return dict with location of files in project
'''
locations dict only will contain names of file subject to change
all files generated by odm are constant and thus no need to include them
changing files are
-project_path
-gcp_list name
-csv file name
'''
def get_location():
    location_dict = {} 


    project_location = input('full path of project folder: ')
    # cleanup of string
    project_location = project_location.strip('"')  # remove possible trailing and leading quotes
    project_location = project_location.replace('\\', '/') # replace windows \ with linux filesystem /
    print(project_location)

    location_dict['project_location'] = project_location

    directory = os.listdir(project_location)

    # check if images file exists
    if 'images' in directory:
        location_dict['images_location'] = project_location +'/images/' # add path of images to location_dict
    else: # could not find images directory
        print('could not find images directory')
        print('make sure the folder with the images is in the base of the project folder and named "images"')
        print('found items', directory)
        exit()
     

    # check if there is already a gcp file
    if 'gcp_list.txt' in directory:
        new_GCP = input('gcp_list found, use current file?(Y/N) ')
        if new_GCP == 'Y':
            location_dict['GCP_location'] = project_location + '/gcp_list.txt'
            # if GCP will be used then can return now since all_gcp file not necessary
            return  location_dict 
            
    # if no gcp_list file then print this message
    else:
        print('*'*40)
        print('Could not find gcp_list.txt file')
        print('if gcp file exists make sure it is named correctly and in base of project folder', flush=True)
    
    # trying to create new gcp file
    # check for all_gcp.csv, if does not exist then do not use gcp 
    if 'all_gcp.csv' in directory:
        print('"all_gcp" csv found')
        print('recommend creating GCP file for greater accuracy')
        user_in = input('create gcp_list file?(Y/N) ')
        if user_in == 'Y':
            print('continuing with GCP') 
            location_dict['all_gcp_location'] = project_location+'/all_gcp.csv'
            return location_dict

    else:
        print('*'*40)
        print('WARNING')
        print('could not find "all_gcp.csv" file')
        print('to continue with GCP, make sure all_gcp.csv file is named correctly and in base of project folder')
        cont = input('continue without GCP?(Y/N): ')
        if cont == 'N':
            exit()
        print('*'*40)

    return location_dict 


# runs the odm
def run_odm(locations):
    command = f'docker run -ti --rm -v {locations["project_location"]}:/datasets/code opendronemap/odm --project-path /datasets --dsm --dtm --force-gps --smrf-window 10 --smrf-threshold 0.15 --smrf-slope 0.1 --rerun-all --max-concurrency 3'
    os.system(command)

def startup():
    locations = get_location()

    # all_gcp_location only in dict when new gcp is to be created
    new_GCP = 'all_gcp_location' in locations
    if new_GCP is True: 
        print('creating new GCP file', flush=True)
        getGCP(locations)
        # add gcp location to locations dict
        locations['GCP_location'] = locations['project_location'] + '/gcp_list.txt'


    print('Running odm')
    run_odm(locations) 

    return locations


if __name__ == '__main__':
    locations = startup()
    #locations = get_location()
    # create ODM class instance for the odm outputs
    ODMEval(locations)
    
